#include <iostream>
#include <string>
#include <list>

using namespace std;
class Manager;
class Booking {
private:
    int bookingID;
    string bookingDate;
    int duration;

public:
    Booking(int id, const string& date, int dur) : bookingID(id), bookingDate(date), duration(dur) {}

    int getBookingID() const {
        return bookingID;
    }
};
class Node {
public:
    Node* next;
    void* data;

    Node() : next(NULL) {}
};
class Customer : public Node {
private:
    string name;
    string address;
    string date;
    string paymentMethod;
    int ID;
    list<Booking> bookingsList;


public:
    Customer* next;
    Customer() : Node() {}
    Customer(const string& name, const string& address, const string& date, const string& paymentMethod, int ID)
        : name(name), address(address), date(date), paymentMethod(paymentMethod), ID(ID), next(NULL) {
    }
    // Function to add the customer to the linked list
    void addCustomer(Manager&manager) ;
    void addBooking();
    void updateBooking();
    void removeBooking();
    void displayCustomerMenu();
    int getId()const{return ID;}
    string getName() const { return name; }
    string getaddress()const{return address;}
    string paymentmethod() const{return paymentMethod;}
};
class Room : public Node {
public:
    int roomNo;
    string roomType;
    string state;
    int level;
    int rent;

    Room() : Node() {}

    int getRoomNo() const { return roomNo; }
    void addRoom();
    void removeRoom();
    void displayRoom();
    void searchRoom();
};
class Manager {
private:
    string password = "dagi123";

public:
    Node* roomsHead;
    Node* customersHead;
    Manager() : roomsHead(NULL), customersHead(NULL) {}

    void checkIn();
    bool authenticateManager();
    void getAvailableRoom();
    void searchCustomer();
    void checkOut();
    void guestSummaryReport();
    void addRoom();
    void displayManagerMenu();
    void displayCustomerMenu();
};
void Customer::addCustomer(Manager& manager) {
    // Access customersHead through the Manager class
    if (manager.customersHead == NULL) {
        manager.customersHead = this;
    } else {
        // Traverse the list and add this customer to the end
        Node* currentNode = manager.customersHead;
        while (currentNode->next != NULL) {
            currentNode = currentNode->next;
        }
        currentNode->next = new Node();
        currentNode->next->data = this;
        cout<<"Coustomer added successfully";// Store the pointer to the Customer object
    }
}
void Customer::addBooking() {
    int duration;
    cout << "Enter booking details:\n";
    cout << "Name: ";
    cin >> name;
    cout << "Address: ";
    cin.ignore(); // Ignore any previous newline character
    getline(cin, address);
    cout << "Date: ";
    cin >> date;
    cout << "Payment Method: ";
    cin >> paymentMethod;
    cout << "ID: ";
    cin >> ID;
    cout<<"For how many days do you stay: ";
    cin>> duration;

    Booking newBooking(ID, date, duration);
    bookingsList.push_back(newBooking);
    cout<< "succussfully booked! ";

}
void Customer::updateBooking() {
     int duration;
    cout << "Enter booking details:\n";
    cout << "Name: ";
    cin >> name;
    cout << "Address: ";
    cin.ignore(); // Ignore any previous newline character
    getline(cin, address);
    cout << "Date: ";
    cin >> date;
    cout << "Payment Method: ";
    cin>> paymentMethod;
    cout << "ID: ";
    cin >> ID;
     cout<<"For how many days do you stay: ";
    cin>> duration;
    Booking newBooking(ID, date,14);
    bookingsList.push_back(newBooking);
}
void Customer::removeBooking() {
    int bookingIDToRemove;
    cout << "Enter the booking ID to remove: ";
    cin >> bookingIDToRemove;

    auto it = bookingsList.begin();
    while (it != bookingsList.end()) {
        if (it->getBookingID() == bookingIDToRemove) {
            it = bookingsList.erase(it);
            cout << "Booking with ID " << bookingIDToRemove << " removed successfully." << endl;
            return;
        }
        ++it;
    }
    cout << "Booking with ID " << bookingIDToRemove << " not found." << endl;
}
void Manager::getAvailableRoom() {
    if (roomsHead == NULL) {
        cout << "No available rooms.\n";
        return;
    }

    cout << "Available Rooms:\n";
    Room* currentRoom = static_cast<Room*>(roomsHead);
    while (currentRoom != NULL) {
        if (currentRoom->state == "Available") {
            cout << "Room No: " << currentRoom->getRoomNo() << endl;
            cout << "Room Type: " << currentRoom->roomType << endl;
            cout << "State: " << currentRoom->state << endl;
            cout << "Level: " << currentRoom->level << endl;
            cout << "Rent: " << currentRoom->rent << endl;
            cout << endl;
        }
        currentRoom = static_cast<Room*>(currentRoom->next);
    }
}
void Manager::searchCustomer() {
    system("cls");
    string name;
    cout << "Enter customer name: ";
    cin>>name;

    Customer* currentCustomer = static_cast<Customer*>(customersHead);
    while (currentCustomer != NULL) {
        if (currentCustomer->getName() == name) {
            cout << "Customer Found: " << currentCustomer->getName() << endl;
            cout <<"Customer address:"<<currentCustomer->getaddress()<<endl;
            cout <<"Customer Id :"<<currentCustomer->getId()<<endl;
            cout <<"Customer paymentMethod:"<<currentCustomer->paymentmethod()<<endl;

            return;
        }
        currentCustomer = static_cast<Customer*>(currentCustomer->next);
    }
    cout << "Customer not found." << endl;
    cout << "Press any key to continue" << endl;
    cin.ignore();
    cin.get();
    system("cls");
}
bool Manager::authenticateManager() {
    string inputPassword;
    cout << "Enter Manager Password: ";
    cin >> inputPassword;
    return inputPassword == password;
}
void Manager::checkIn() {
    int customerID;
    int roomNumber;

    cout << "Enter customer ID: ";
    cin >> customerID;
    cout << "Enter room number: ";
    cin >> roomNumber;
    Customer* currentCustomer = static_cast<Customer*>(customersHead);
    while (currentCustomer != NULL) {
        if (currentCustomer->getId() == customerID) {
            Room* currentRoom = static_cast<Room*>(roomsHead);
            while (currentRoom != NULL) {
                if (currentRoom->roomNo == roomNumber) {
                    // Room found, check if it's available
                    if (currentRoom->state == "Available") {
                        // Room is available, assign it to the customer
                        currentRoom->state = "Occupied";
                        cout << "Customer checked in successfully to room number " << roomNumber << "." << endl;
                        return;
                    } else {
                        cout << "Room number " << roomNumber << " is not available." << endl;
                        return;
                    }
                }
                currentRoom = static_cast<Room*>(currentRoom->next);
            }
            cout << "Room number " << roomNumber << " not found." << endl;
            return;
        }
        currentCustomer = static_cast<Customer*>(currentCustomer->next);
    }
    cout << "Customer with ID " << customerID << " not found." << endl;
}
void Manager::checkOut() {
    int roomNumber;
    cout << "Enter room number for check-out: ";
    cin >> roomNumber;

    // Find the room in the linked list of rooms
    Room* currentRoom = static_cast<Room*>(roomsHead);
    while (currentRoom != NULL) {
        if (currentRoom->roomNo == roomNumber) {
            // Room found
            if (currentRoom->state == "Occupied") {
                // Update room state to Available
                currentRoom->state = "Available";
                cout << "Check-out completed for room number " << roomNumber << "." << endl;
                // Additional actions such as generating a bill, updating customer records, etc., can be performed here
                return;
            } else {
                // Room is not occupied, cannot check-out
                cout << "Room number " << roomNumber << " is not occupied. No check-out is possible." << endl;
                return;
            }
        }
        currentRoom = static_cast<Room*>(currentRoom->next);
    }
    // Room not found
    cout << "Room number " << roomNumber << " not found." << endl;
}
void Manager::guestSummaryReport() {
    cout << "Guest Summary Report:\n";
    Room* currentRoom = static_cast<Room*>(roomsHead);
    while (currentRoom != NULL) {
        if (currentRoom->state == "Occupied") {
            cout << "Room No: " << currentRoom->roomNo << endl;
            Customer* currentCustomer = static_cast<Customer*>(customersHead);
            while (currentCustomer != NULL) {
                if (currentCustomer->getId()== currentRoom->roomNo) {
                    cout << "Customer Name: " << currentCustomer->getName() << endl;
                    cout <<"Customer address:"<<currentCustomer->getaddress()<<endl;
                    cout <<"Customer Id :"<<currentCustomer->getId()<<endl;
                    cout <<"Customer paymentMethod:"<<currentCustomer->paymentmethod()<<endl;
                    break;
                }
                currentCustomer = static_cast<Customer*>(currentCustomer->next);
            }
        }
        currentRoom = static_cast<Room*>(currentRoom->next);
    }
}
void Manager::addRoom() {
    int roomNo;
    string roomType;
    int level;
    int rent;

    cout << "Enter room number: ";
    cin >> roomNo;
    cout << "Enter room type: ";
    cin >> roomType;
    cout << "Enter level: ";
    cin >> level;
    cout << "Enter rent: ";
    cin >> rent;

    // Create a new Room object
    Room* newRoom = new Room();
    newRoom->roomNo = roomNo;
    newRoom->roomType = roomType;
    newRoom->level = level;
    newRoom->rent = rent;
    newRoom->state = "Available"; // By default, the room is available

    // Add the new room to the linked list
    if (roomsHead == NULL) {
        roomsHead = newRoom;
    } else {
        // Find the last room in the linked list
        Room* currentRoom = static_cast<Room*>(roomsHead);
        while (currentRoom->next != NULL) {
            currentRoom = static_cast<Room*>(currentRoom->next);
        }
        // Assign the new room to the next pointer of the last room
        currentRoom->next = newRoom;
    }
    cout << "Room added successfully." << endl;
}
void Manager::displayManagerMenu() {
    system("cls");
    if (!authenticateManager()) {
        cout << "Authentication failed. Exiting Manager Menu.\n";
        return;
    }
    system("cls");

    int choice;
    do {
        cout<< "                                HOTEL MANAGMENT SYSTEM!\n";
        cout << "\nManager Menu:\n1. Check-in\n2. Get Available Room\n3. Search Customer\n4. Check-out\n5. Guest Summary Report\n6. Add Room\n7. Exit\nEnter your choice: ";
        cin >> choice;
switch (choice) {
            case 1:
                checkIn();
                break;
            case 2:
                getAvailableRoom();
                break;
            case 3:
                searchCustomer();
                break;
            case 4:
                checkOut();
                break;
            case 5:
                guestSummaryReport();
                break;
            case 6:
                addRoom();
                break;
            case 7:
                cout << "Exiting manager menu.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 7);
     system("cls");
}
void Customer::displayCustomerMenu() {
    system("cls");
    int choice;
    cout<< "HOTEL MANAGMENT SYSTEM!\n";
    do {
        cout << "\nCustomer Menu:\n1. Booking\n2. Update Booking\n3. Remove Booking\n4. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addBooking();
                break;
            case 2:
                updateBooking();
                break;
            case 3:
                removeBooking();
                break;
            case 4:
                cout << "Exiting customer menu.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 4);
     system("cls");
}
int main() {
     system("cls");
    Manager manager;
    Customer customer;
    cout<< "HOTEL MANAGMENT SYSTEM!\n";

    // Main Menu
    int mainChoice;
    do {
        cout<< "                                     HOTEL MANAGMENT SYSTEM!\n";
        cout << "\nMain Menu:\n1. Manager Menu\n2. Customer Menu\n3. Exit\nEnter your choice: ";
        cin >> mainChoice;

        switch (mainChoice) {
            case 1:
                manager.displayManagerMenu();
                break;
            case 2:
                customer.addCustomer(manager);
                customer.displayCustomerMenu();
                break;
            case 3:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (mainChoice != 3);

    return 0;
}
